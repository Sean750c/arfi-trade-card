```typescript
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { User, RegisterRequest } from '@/types';
import Input from '@/components/UI/Input';
import Button from '@/components/UI/Button';
import Spacing from '@/constants/Spacing';
import { useAuthStore } from '@/stores/useAuthStore';
import { useCountryStore } from '@/stores/useCountryStore';
import { useTheme } from '@/theme/ThemeContext';
import SafeAreaWrapper from '@/components/UI/SafeAreaWrapper';
import { Eye, EyeOff, User as UserIcon, Mail, MessageCircle } from 'lucide-react-native';

interface SocialRegisterParams {
  username?: string;
  social_id: string;
  validate_email?: string;
  social_email?: string;
  social_name?: string;
  token: string; // Temporary token for social session
}

export default function SocialRegisterScreen() {
  const { colors } = useTheme();
  const { register, isLoading, error, setUser } = useAuthStore();
  const { selectedCountry } = useCountryStore();
  const params = useLocalSearchParams<SocialRegisterParams>();

  const [username, setUsername] = useState(params.username || params.social_name || '');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (error) {
      Alert.alert('Registration Error', error);
    }
  }, [error]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!username.trim()) {
      newErrors.username = 'Username is required';
    } else if (username.trim().length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    }

    if (!password.trim()) {
      newErrors.password = 'Password is required';
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }

    if (!confirmPassword.trim()) {
      newErrors.confirmPassword = 'Please confirm your password';
    } else if (password !== confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleRegister = async () => {
    if (!validateForm() || !selectedCountry) return;

    const registerData: RegisterRequest = {
      username: username.trim(),
      password: password,
      country_id: selectedCountry.id,
      register_type: '3', // Assuming '3' for social registration
      device_no: '', // Will be generated by AuthService
      channel_type: '1', // Web platform
      email: params.social_email || params.validate_email,
      // whatsapp: params.whatsapp, // If WhatsApp is part of social data
      // recommend_code: params.recommend_code, // If applicable
      // code: params.code, // If verification code is needed
    };

    try {
      // Call the register method from useAuthStore
      await register(registerData);
      Alert.alert('Success', 'Account created and linked successfully!', [
        { text: 'OK', onPress: () => router.replace('/(tabs)') },
      ]);
    } catch (e) {
      // Error handled by useAuthStore and displayed via useEffect
    }
  };

  return (
    <SafeAreaWrapper backgroundColor={colors.background}>
      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.scrollContent}
        >
          <View style={styles.header}>
            <Text style={[styles.title, { color: colors.text }]}>Complete Your Registration</Text>
            <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
              Just a few more steps to set up your account.
            </Text>
          </View>

          <View style={styles.form}>
            <Input
              label="Username"
              value={username}
              onChangeText={setUsername}
              placeholder="Choose a username"
              keyboardType="default"
              autoCapitalize="none"
              error={errors.username}
              leftIcon={<UserIcon size={20} color={colors.textSecondary} />}
            />

            {params.social_email && (
              <Input
                label="Email (from social login)"
                value={params.social_email}
                editable={false}
                inputStyle={{ opacity: 0.7 }}
                leftIcon={<Mail size={20} color={colors.textSecondary} />}
              />
            )}
            {params.validate_email && !params.social_email && (
              <Input
                label="Email (from social login)"
                value={params.validate_email}
                editable={false}
                inputStyle={{ opacity: 0.7 }}
                leftIcon={<Mail size={20} color={colors.textSecondary} />}
              />
            )}
            {/* Add similar fields for other social data like phone/whatsapp if available */}

            <Input
              label="Password"
              value={password}
              onChangeText={setPassword}
              placeholder="Enter your password"
              secureTextEntry={!showPassword}
              error={errors.password}
              leftIcon={<UserIcon size={20} color={colors.textSecondary} />}
              rightElement={
                <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
                  {showPassword ? (
                    <EyeOff size={20} color={colors.textSecondary} />
                  ) : (
                    <Eye size={20} color={colors.textSecondary} />
                  )}
                </TouchableOpacity>
              }
            />

            <Input
              label="Confirm Password"
              value={confirmPassword}
              onChangeText={setConfirmPassword}
              placeholder="Confirm your password"
              secureTextEntry={!showConfirmPassword}
              error={errors.confirmPassword}
              leftIcon={<UserIcon size={20} color={colors.textSecondary} />}
              rightElement={
                <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
                  {showConfirmPassword ? (
                    <EyeOff size={20} color={colors.textSecondary} />
                  ) : (
                    <Eye size={20} color={colors.textSecondary} />
                  )}
                </TouchableOpacity>
              }
            />

            <Button
              title={isLoading ? 'Registering...' : 'Complete Registration'}
              onPress={handleRegister}
              disabled={isLoading}
              loading={isLoading}
              fullWidth
              style={styles.registerButton}
            />

            <TouchableOpacity onPress={() => router.replace('/(auth)/login')}>
              <Text style={[styles.loginText, { color: colors.primary }]}>
                Already have an account? <Text style={styles.loginLink}>Login here</Text>
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaWrapper>
  );
}

const styles = StyleSheet.create({
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: Spacing.lg,
  },
  header: {
    alignItems: 'center',
    marginBottom: Spacing.xl,
  },
  title: {
    fontSize: 28,
    fontFamily: 'Inter-Bold',
    marginBottom: Spacing.xs,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    textAlign: 'center',
    lineHeight: 24,
  },
  form: {
    gap: Spacing.md,
  },
  registerButton: {
    marginTop: Spacing.lg,
  },
  loginText: {
    marginTop: Spacing.md,
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    textAlign: 'center',
  },
  loginLink: {
    fontFamily: 'Inter-SemiBold',
  },
});
```